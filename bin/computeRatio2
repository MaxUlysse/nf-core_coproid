#!/usr/bin/env python3

import argparse
import sys
import datetime
import numpy as np
import matplotlib.pyplot as plt
plt.switch_backend('agg')


def get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='computeRatio',
        description='Compute read count ratio between target genome1 and target genome2')
    parser.add_argument(
        '-c',
        dest='countFile',
        default=None,
        help="Normalized read count file")
    parser.add_argument(
        '-i',
        dest='identity',
        default=0.97,
        help='Identity threshold to retain read alignment'
    )
    parser.add_argument(
        '-v',
        dest="version",
        default=None,
        help='coproID version'
    )
    parser.add_argument(
        '-o',
        dest="output",
        default="coproID_result.md",
        help="Output file basename. Default = coproID_result.md")

    args = parser.parse_args()

    countFile = args.countFile
    identity = float(str(args.identity))
    version = str(args.version)
    outfile = args.output

    return(countFile, identity, version, outfile)


def getBasename(file_name):
    if ("/") in file_name:
        basename = file_name.split("/")[-1].split(".")[0]
    else:
        basename = file_name.split(".")[0]
    return(basename)


def getFile(path):
    if ("/") in path:
        filename = path.split("/")[-1]
    else:
        filename = path
    return(filename)


if __name__ == "__main__":
    CF, ID, VERSION, OUTFILE = get_args()

    identity = ID * 100

    if CF is None:
        print("Count file is missing")
        sys.exit(1)

    d = {}
    d2 = {}
    all_orga = []
    with open(CF, "r") as f:
        for line in f:
            line = line.rstrip().split(",")
            sample = line[0]
            organism = line[1]
            nbp = int(line[2])
            gs = int(line[3])
            bpcor = float(line[4])
            if sample not in d.keys():
                d[sample] = {}
            d[sample][organism] = [nbp, gs, bpcor]
            all_orga.append(organism)
    all_orga = list(set(all_orga))
    orga1 = all_orga[0]
    orga2 = all_orga[1]
    gs1 = d[sample][orga1][1]
    gs2 = d[sample][orga2][1]

    for akey in d.keys():
        d2[akey] = round(d[akey][orga1][2] / d[akey][orga2][2], 5)

    orga1_clean = orga1.replace("_", " ")
    orga2_clean = orga2.replace("_", " ")

    ratio = max(list(d2.values()))

    x = list(d2.values())
    y = list(d2.keys())

    if ratio < 2:
        ticklist = [orga2_clean] + [str(round(x, 2)) for x in list(
            np.arange(0.2, 2, 0.2))] + [orga1_clean]
    else:
        step = round(ratio / 20, 1)
        ticklist = [orga2_clean] + [str(round(x, 2)) for x in list(
            np.arange(step, ratio, step))] + [orga1_clean]

    plt.plot(x, y, "ro")

    plt.axvline(x=1)
    if ratio < 2:
        plt.xticks((np.arange(0, 2.2, 0.2)),
                   (ticklist), rotation="vertical")
    else:
        plt.xticks((np.arange(0, ratio + step, step)),
                   (ticklist), rotation="vertical")
    plt.yticks(rotation='45')
    plt.subplots_adjust(bottom=0.4, left=0.15)

    plt.savefig("./ratio.png")

    now = datetime.datetime.now()
    with open(OUTFILE, "w") as fw:
        fw.write("---\ntitle: coproID - Coprolite Identification\n---\n  ")
        fw.write(
            '<img src="https://raw.githubusercontent.com/maxibor/coproID/master/img/logo.png" height="150">\n\n')
        fw.write(
            '**Homepage/Documentation**: [github.com/maxibor/coproID](https://github.com/maxibor/coproID)  \n**Author:** Maxime Borry [borry@shh.mpg.de](mailto:borry@shh.mpg.de)\n\n  ')
        fw.write("Report automatically generated by coproID version " + VERSION + " on " + str(now.year) + "-" + str(now.month) + "-" +
                 str(now.day) + "  " + str(now.hour) + ":" + str(now.minute) + ":" + str(now.second) + "  \n")
        fw.write("\n\n")
        fw.write("***\n")
        fw.write("- **Organisms:**   \n\n    - *" + orga1_clean + "* (genome size = " + str(gs1) +
                 " bp )  \n\n    - *" + orga2_clean + "* (genome size = " + str(gs2) + " bp)  \n")
        fw.write(
            "- **The formula used to compute the read ratio is the following:** \n\n  $NormalizedRead_{ratio} = \\frac{\\frac{bp_{aligned genome 1} + 1}{size{genome1}}}{\\frac{bp_{aligned genome 2} + 1}{size{genome2}}}$\n\n  ")
        fw.write("***\n")
        for asample in d2.keys():
            fw.write("### **Sample:** " + asample + "  \n")
            fw.write("- **Number of base pairs (bp) in reads aligned to *" +
                     orga1_clean + "* (genome 1) at " + str(identity) + "\% identity:** " + str(d[asample][orga1][0]) + "  \n")
            fw.write("- **Number of base pairs (bp) in reads aligned to *" +
                     orga2_clean + "* (genome 2) at " + str(identity) + "\% identity:** " + str(d[asample][orga2][0]) + "  \n\n")
            fw.write("- Normalized Read ratio $\\frac{" + orga1.replace("_", "\\;") + "}{" +
                     orga2.replace("_", "\\;") + "} = " + str(d2[asample]) + "$   \n\n")
            fw.write("- **MapDamage plots**\n\n")
            fw.write("![MapDamage Fragmisincorporation plot for " +
                     orga1_clean + "](./" + asample + "." + orga1 + ".fragmisincorporation_plot.png)\n\n")
            fw.write("![MapDamage Fragmisincorporation plot for " +
                     orga2_clean + "](./" + asample + "." + orga2 + ".fragmisincorporation_plot.png)\n\n")
            fw.write("\n\n***\n")
        fw.write("***\n")
        fw.write("## coproID read ratio plot\n\n")
        fw.write("![Normalized read ratio (*" + orga1_clean +
                 "*/*" + orga2_clean + "*), blue line is an equal proportion of both genomes](./ratio.png)\n")
