#!/usr/bin/env python

import argparse
import pysam
import multiprocessing
import sys
from functools import partial


def get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='normalizedReadCount',
        description='Counts reads aligned to genome, and normalize by genome size')
    parser.add_argument(
        '-b',
        dest='bam',
        default=None,
        help="Bam aligment file on genome")
    parser.add_argument(
        '-g',
        dest="genome",
        default=None,
        help="Fasta file of genome")
    parser.add_argument(
        '-s',
        dest='size',
        default=None,
        help='Genome size in bp')
    parser.add_argument(
        '-n',
        dest='name',
        default=None,
        help='Organism name. Example: "Homo_sapiens"'
    )
    parser.add_argument(
        '-o',
        dest="output",
        default=None,
        help="Output file basename. Default = {BAM_GENOME}.out")
    parser.add_argument(
        '-p',
        dest="processes",
        default=4,
        help="Number of parallel process. Default = 4",
    )

    args = parser.parse_args()

    bam = args.bam
    genome = args.genome
    size = args.size
    organame = args.name
    outfile = args.output
    processes = int(args.processes)

    return(bam, genome, size, organame, outfile, processes)


def getBasename(file_name):
    if ("/") in file_name:
        basename = file_name.split("/")[-1].split(".")[0]
    else:
        basename = file_name.split(".")[0]
    return(basename)


def computeGenomeSize(fasta):
    gs = 0
    with open(fasta, "r") as f:
        for line in f:
            line = line.rstrip()
            if not line.startswith(">"):
                gs += len(line)
    return(gs)


def getNumberMappedReads(bam):
    nb_mapped_reads = 0
    min_identity = 0.99
    bamfile = pysam.AlignmentFile(bam, "rb")

    for read in bamfile:
        identity = read.query_alignment_length / read.query_length
        if identity >= min_identity:
            nb_mapped_reads += read.query_length
    return(nb_mapped_reads)


def perChromosome(chr, bam):
    nb_mapped_reads_chr = 0
    min_identity = 0.99
    bamfile = pysam.AlignmentFile(bam, "rb")
    reads = bamfile.fetch(chr, multiple_iterators=True)
    for read in reads:
        identity = read.query_alignment_length / read.query_length
        if identity >= min_identity:
            nb_mapped_reads_chr += read.query_length
    return(nb_mapped_reads_chr)


def getNumberMappedReadsMultiprocess(bam, processes):
    nb_mapped_reads = 0
    bamfile = pysam.AlignmentFile(bam, "rb")
    chrs = bamfile.references

    perChromosomePartial = partial(perChromosome, bam=bam)
    p = multiprocessing.Pool(processes)
    result = p.map(perChromosomePartial, chrs)
    p.close()
    p.join()
    nb_mapped_reads = sum(list(result))
    return(nb_mapped_reads)


if __name__ == "__main__":
    BAM, GENOME, SIZE, ORGANAME, OUTFILE, PROCESSES = get_args()

    if BAM is None:
        print("Missing BAM file")
        sys.exit(1)

    bam_basename = getBasename(BAM)

    if not OUTFILE:
        OUTFILE = bam_basename + "_" + ORGANAME + ".out"

    if SIZE is None:
        gs = computeGenomeSize(GENOME)
    else:
        gs = int(SIZE)
    nb = getNumberMappedReadsMultiprocess(BAM, PROCESSES)
    # nb = getNumberMappedReads(BAM)
    with open(OUTFILE, 'w') as w:
        w.write(ORGANAME + "," + str(round((nb / gs), 6)))
