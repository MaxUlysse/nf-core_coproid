#!/usr/bin/env python3

import argparse
import multiprocessing
import sys
from functools import partial
from math import log2
import pysam


def get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='normalizedReadCount',
        description='Counts reads aligned to genome, and normalize by genome size')
    parser.add_argument(
        '-b1',
        dest='bam1',
        default=None,
        help="Bam aligment file on genome. Default = None")
    parser.add_argument(
        '-g1',
        dest="genome1",
        default=None,
        help="Fasta file of genome. Default = None")
    parser.add_argument(
        '-r1',
        dest='organism1',
        default=None,
        help='Organism name. Example: "Homo_sapiens". Default = None'
    )
    parser.add_argument(
        '-b2',
        dest='bam2',
        default=None,
        help="Bam aligment file on genome. Default = None")
    parser.add_argument(
        '-g2',
        dest="genome2",
        default=None,
        help="Fasta file of genome. Default = None")
    parser.add_argument(
        '-r2',
        dest='organism2',
        default=None,
        help='Organism name. Example: "Homo_sapiens". Default = None'
    )
    parser.add_argument(
        '-b3',
        dest='bam3',
        default=None,
        help="Bam aligment file on genome. Default = None")
    parser.add_argument(
        '-g3',
        dest="genome3",
        default=None,
        help="Fasta file of genome. Default = None")
    parser.add_argument(
        '-r3',
        dest='organism3',
        default=None,
        help='Organism name. Example: "Homo_sapiens". Default = None'
    )
    parser.add_argument(
        '-n',
        dest='name',
        default=None,
        help='Sample name. Default = None'
    )
    parser.add_argument(
        '-i',
        dest='identity',
        default=0.95,
        help='Identity threshold to retain read alignment. Default = 0.95'
    )
    parser.add_argument(
        '-o',
        dest="output",
        default=None,
        help="Output file basename. Default = {BAM_GENOME}.out"
    )
    parser.add_argument(
        '-ob1',
        dest="output_bam1",
        default=None,
        help="Output bam 1 filename. Default = {BAM1_INPUT}.filtered.bam"
    )
    parser.add_argument(
        '-ob2',
        dest="output_bam2",
        default=None,
        help="Output bam 2 filename. Default = {BAM2_INPUT}.filtered.bam"
    )
    parser.add_argument(
        '-ob3',
        dest="output_bam3",
        default=None,
        help="Output bam 3 filename. Default = {BAM2_INPUT}.filtered.bam"
    )
    parser.add_argument(
        '-sp',
        dest='sourcepredict',
        default=None,
        help='sourcepredict log ratio (orga1 vs others)'
    )
    parser.add_argument(
        '-p',
        dest="processes",
        default=4,
        help="Number of parallel process. Default = 4",
    )

    args = parser.parse_args()

    bam1 = args.bam1
    genome1 = args.genome1
    organame1 = args.organism1
    bam2 = args.bam2
    genome2 = args.genome2
    organame2 = args.organism2
    bam3 = args.bam3
    genome3 = args.genome3
    organame3 = args.organism3
    sourcepredict = args.sourcepredict
    sname = args.name
    identity = float(str(args.identity))
    outfile = args.output
    obam1 = args.output_bam1
    obam2 = args.output_bam2
    obam3 = args.output_bam3

    processes = int(args.processes)

    return(bam1, genome1, organame1, bam2, genome2, organame2, bam3, genome3, organame3, sourcepredict, sname, identity, processes, outfile, obam1, obam2, obam3)


def getBasename(file_name):
    if ("/") in file_name:
        basename = file_name.split("/")[-1].split(".")[0]
    else:
        basename = file_name.split(".")[0]
    return(basename)


def computeGenomeSize(fasta):
    gs = 0
    with open(fasta, "r") as f:
        for line in f:
            line = line.rstrip()
            if not line.startswith(">"):
                gs += len(line)
    return(gs)


def getNumberMappedReads(bam, id):
    nb_mapped_reads = 0
    min_identity = id
    bamfile = pysam.AlignmentFile(bam, "rb")

    for read in bamfile:
        mismatch = read.get_tag("NM")
        alnLen = read.query_alignment_length
        readLen = read.query_length
        identity = (alnLen - mismatch) / readLen
        if identity >= min_identity:
            nb_mapped_reads += (alnLen - mismatch)
    return(nb_mapped_reads)


def perChromosome(chr, bam, id, commonReads=[]):
    resdic = {}
    resdic["bpCnt"] = 0
    resdic["mappedReads"] = []
    min_identity = id
    bamfile = pysam.AlignmentFile(bam, "rb")
    reads = bamfile.fetch(chr, multiple_iterators=True)
    if len(commonReads) == 0:
        for read in reads:
            mismatch = read.get_tag("NM")
            alnLen = read.query_alignment_length
            readLen = read.query_length
            identity = (alnLen - mismatch) / readLen
            if identity >= min_identity:
                resdic["bpCnt"] += (alnLen - mismatch)
                resdic["mappedReads"].append(read.query_name)
    else:
        for read in reads:
            mismatch = read.get_tag("NM")
            alnLen = read.query_alignment_length
            readLen = read.query_length
            identity = (alnLen - mismatch) / readLen
            if identity >= min_identity and (read.query_name not in(commonReads)):
                resdic["bpCnt"] += (alnLen - mismatch)
                resdic["mappedReads"].append(read.query_name)
    return(resdic)


def getNumberMappedReadsMultiprocess(bam, processes, id, commonReads=[]):
    resdic = {}
    resdic["bpCnt"] = 0
    resdic["mappedReads"] = []
    try:
        bamfile = pysam.AlignmentFile(bam, "rb")
    except ValueError:
        return(resdic)
    chrs = bamfile.references

    perChromosomePartial = partial(
        perChromosome, bam=bam, id=id, commonReads=commonReads)
    p = multiprocessing.Pool(processes)
    result = p.map(perChromosomePartial, chrs)
    p.close()
    p.join()
    for i in result:
        resdic["bpCnt"] += i["bpCnt"]
        resdic["mappedReads"].extend(list(i["mappedReads"]))
    return(resdic)


def writeBam(inbam, outbam, commonReads):
    try:
        bamin = pysam.AlignmentFile(inbam, "rb")
        bamout = pysam.AlignmentFile(outbam, 'w', template=bamin)
        for s in bamin:
            if s.query_name not in commonReads:
                bamout.write(s)
    except ValueError:
        with open("error_readme_"+outbam, "w") as o:
            o.write("Error writing this BAM file, input bam file was erroneous")


def getCommonReads(readsBam1, readsBam2, readsBam3=None):
    reads1 = set(readsBam1)
    reads2 = set(readsBam2)
    if not readsBam3:
        res = list(reads1.intersection(reads2))
    else:
        reads3 = set(readsBam3)
        res = list(reads1.intersection(reads2).intersection(reads3))
    return(res)


def parse_sourpredict(sp_file):
    with open(sp_file, 'r') as f:
        d = {}
        for line in f:
            s = line.split(',')
            if "UNKNOWN" in line:
                for o in s:
                    d[o] = 0
            else:
                for i, j in zip(d.keys(), s):
                    d[i] = float(j)
    return(d)


if __name__ == "__main__":
    BAM1, GENOME1, ORGANAME1, BAM2, GENOME2, ORGANAME2, BAM3, GENOME3, ORGANAME3, SOURCEPREDICT, SNAME, ID, PROCESSES, OUTFILE, OBAM1, OBAM2, OBAM3 = get_args()

    if BAM1 is None:
        print("Missing BAM file")
        sys.exit(1)
    elif BAM2 is None:
        print("Missing BAM file")
        sys.exit(1)

    sp = parse_sourpredict(SOURCEPREDICT)

    bam_basename1 = getBasename(BAM1)
    bam_basename2 = getBasename(BAM2)
    if BAM3:
        bam_basename3 = getBasename(BAM3)

    if not OUTFILE:
        OUTFILE = SNAME + ".out"

    gs1 = computeGenomeSize(GENOME1)
    gs2 = computeGenomeSize(GENOME2)
    if BAM3:
        gs3 = computeGenomeSize(GENOME3)

    bam1_res = getNumberMappedReadsMultiprocess(
        bam=BAM1, processes=PROCESSES, id=ID)
    bam2_res = getNumberMappedReadsMultiprocess(
        bam=BAM2, processes=PROCESSES, id=ID)
    if BAM3:
        bam3_res = getNumberMappedReadsMultiprocess(
            bam=BAM3, processes=PROCESSES, id=ID)

    print("nb1_first", bam1_res["bpCnt"])
    print("nb2_first", bam2_res["bpCnt"])
    if BAM3:
        print("nb3_first", bam3_res["bpCnt"])

    reads1 = bam1_res["mappedReads"]
    reads2 = bam2_res["mappedReads"]
    if BAM3:
        reads3 = bam3_res["mappedReads"]
    if not BAM3:
        commonReads = getCommonReads(readsBam1=reads1, readsBam2=reads2)
    else:
        commonReads = getCommonReads(
            readsBam1=reads1, readsBam2=reads2, readsBam3=reads3)

    nb1 = getNumberMappedReadsMultiprocess(
        bam=BAM1, processes=PROCESSES, id=ID, commonReads=commonReads)["bpCnt"]
    nnbp1 = (nb1 + 1) / gs1
    nnbp1 = nnbp1 * (sp[ORGANAME1]+0.001)
    nb2 = getNumberMappedReadsMultiprocess(
        bam=BAM2, processes=PROCESSES, id=ID, commonReads=commonReads)["bpCnt"]
    nnbp2 = (nb2 + 1) / gs2
    nnbp2 = nnbp2 * (sp[ORGANAME2]+0.001)
    if BAM3:
        nb3 = getNumberMappedReadsMultiprocess(
            bam=BAM3, processes=PROCESSES, id=ID, commonReads=commonReads)["bpCnt"]
        nnbp3 = (nb3 + 1) / gs3
        nnbp3 = nnbp3 * (sp[ORGANAME3]+0.001)

    if OBAM1 is None:
        outbam1 = bam_basename1 + ".filtered.bam"
    else:
        outbam1 = OBAM1
    if OBAM2 is None:
        outbam2 = bam_basename2 + ".filtered.bam"
    else:
        outbam2 = OBAM2
    if OBAM3 is None and BAM3:
        outbam3 = bam_basename3 + ".filtered.bam"
    else:
        outbam3 = OBAM3

    writeBam(inbam=BAM1, outbam=outbam1, commonReads=commonReads)
    writeBam(inbam=BAM2, outbam=outbam2, commonReads=commonReads)
    if OBAM3:
        writeBam(inbam=BAM3, outbam=outbam3, commonReads=commonReads)

    # genome1 vs genome2
    NormalizedReadRatio_1vs2 = log2(nnbp1 / nnbp2)
    if BAM3:
        # genome1 vs genome3
        NormalizedReadRatio_1vs3 = log2(nnbp1 / nnbp3)
        # genome2 vs genome3
        NormalizedReadRatio_2vs3 = log2(nnbp2 / nnbp3)

    # sourcepredict

    if not BAM3:
        # Template output file structure
        # Sample_name,Organism_name1,Organism_name2,Genome1_size,Genome2_size,sourcepredict_genome1,sourcepredict_genome2,nb_bp_aligned_genome1,nb_bp_aligned_genome2,normalized_nb_bp_aligned_genome1,normalized_nb_bp_aligned_genome2,NormalizedReadRatio
        with open(OUTFILE, 'w') as w:
            w.write(
                f"{SNAME},{ORGANAME1},{ORGANAME2},{gs1},{gs2},{sp[ORGANAME1]},{sp[ORGANAME2]},{nb1},{nb2},{nnbp1},{nnbp2},{NormalizedReadRatio_1vs2}\n")
    else:
        # Template output file structure
        # Sample_name,Organism_name1,Organism_name2,Organism_name3,Genome1_size,Genome2_size,Genome3_size,,sourcepredict_genome1,sourcepredict_genome2,sourcepredict_genome3,nb_bp_aligned_genome1,nb_bp_aligned_genome2,nb_bp_aligned_genome3,normalized_nb_bp_aligned_genome1,normalized_nb_bp_aligned_genome2,normalized_nb_bp_aligned_genome3,NormalizedReadRatio_1vs2,NormalizedReadRatio_1vs3,NormalizedReadRatio_2vs3
        with open(OUTFILE, 'w') as w:
            w.write(
                f"{SNAME},{ORGANAME1},{ORGANAME2},{ORGANAME3},{gs1},{gs2},{gs3},{sp[ORGANAME1]},{sp[ORGANAME2]},{sp[ORGANAME3]},{nb1},{nb2},{nb3},{nnbp1},{nnbp2},{nnbp3},{NormalizedReadRatio_1vs2},{NormalizedReadRatio_1vs3},{NormalizedReadRatio_2vs3}\n")
