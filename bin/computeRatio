#!/usr/bin/env python3

import argparse
import sys
import datetime
import numpy as np
import matplotlib.pyplot as plt
plt.switch_backend('agg')


def get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='computeRatio',
        description='Compute read count ratio between target genome1 and target genome2')
    parser.add_argument(
        '-c1',
        dest='countFile1',
        default=None,
        help="Normalized read count aligned to genome1")
    parser.add_argument(
        '-c2',
        dest='countFile2',
        default=None,
        help="Normalized read count aligned to genome2")
    parser.add_argument(
        '-s',
        dest='sample',
        default=None,
        help='Sample name'
    )
    parser.add_argument(
        '-i',
        dest='identity',
        default=0.97,
        help='Identity threshold to retain read alignment'
    )
    parser.add_argument(
        '-v',
        dest="version",
        default=None,
        help='coproID version'
    )
    parser.add_argument(
        '-o',
        dest="output",
        default="coproID_result.md",
        help="Output file basename. Default = coproID_result.pdf")

    args = parser.parse_args()

    countFile1 = args.countFile1
    countFile2 = args.countFile2
    sName = args.sample
    identity = float(str(args.identity))
    version = str(args.version)
    outfile = args.output

    return(countFile1, countFile2, sName, identity, version, outfile)


def getBasename(file_name):
    if ("/") in file_name:
        basename = file_name.split("/")[-1].split(".")[0]
    else:
        basename = file_name.split(".")[0]
    return(basename)


def getFile(path):
    if ("/") in path:
        filename = path.split("/")[-1]
    else:
        filename = path
    return(filename)


if __name__ == "__main__":
    CF1, CF2, SNAME, ID, VERSION, OUTFILE = get_args()

    identity = ID * 100

    if CF1 is None and CF2 is None:
        print("Count file 1 and Count file 2 are missing")
        sys.exit(1)
    elif CF1 is None:
        print("Count file 1 is missing")
        sys.exit(1)
    elif CF2 is None:
        print("Count file 2 is missing")
        sys.exit(1)

    organisms = ["", ""]
    nbRead = [0, 0]
    gs = [0, 0]
    readCnt = [0, 0]

    with open(CF1, "r") as f1:
        for line in f1:
            line = line.rstrip().split(",")
            if line[0] == 'organism':
                continue
            else:
                organisms[0] = line[0]
                nbRead[0] = int(line[1])
                gs[0] = int(line[2])
                readCnt[0] = float(line[3])

    with open(CF2, "r") as f2:
        for line in f2:
            line = line.rstrip().split(",")
            if line[0] == 'organism':
                continue
            else:
                organisms[1] = line[0]
                nbRead[1] = int(line[1])
                gs[1] = int(line[2])
                readCnt[1] = float(line[3])

    ratio = round((readCnt[0] / readCnt[1]), 5)

    if ratio < 2:
        ticklist = [organisms[1]] + [str(round(x, 2)) for x in list(
            np.arange(0.1, 2.1, 0.1))] + [organisms[0]]
    else:
        ticklist = [organisms[1]] + [str(round(x, 2)) for x in list(
            np.arange(0.1, ratio + 0.1, 0.1))] + [organisms[0]]

    plt.plot(ratio, 0, "ro")
    plt.tick_params(
        axis='y',          # changes apply to the y-axis
        which='both',      # both major and minor ticks are affected
        bottom=False,      # ticks along the bottom edge are off
        top=False,         # ticks along the top edge are off
        left=False,  # labels along the bottom edge are off
        labelleft=False)

    plt.axvline(x=1)
    if ratio < 2:
        plt.xticks((np.arange(0, 2.2, 0.1)),
                   (ticklist), rotation="vertical")
    else:
        plt.xticks((np.arange(0, ratio + 0.2, 0.1)),
                   (ticklist), rotation="vertical")

    plt.subplots_adjust(bottom=0.4)

    plt.savefig("./ratio.png")

    now = datetime.datetime.now()
    with open(OUTFILE, "w") as fw:
        fw.write("---\ntitle: coproID - Coprolite Identification\n---\n  ")
        fw.write(
            '<img src="https://raw.githubusercontent.com/maxibor/coproID/master/img/logo.png" height="150">\n\n  ')
        fw.write(
            '**Homepage/Documentation**: [github.com/maxibor/coproID](https://github.com/maxibor/coproID)  \n**Author:** Maxime Borry [borry@shh.mpg.de](mailto:borry@shh.mpg.de)\n\n  ')
        fw.write("Report automatically generated by coproID version " + VERSION + " on " + str(now.year) + "-" + str(now.month) + "-" +
                 str(now.day) + "  " + str(now.hour) + ":" + str(now.minute) + ":" + str(now.second) + "  \n")
        fw.write("\n\n")
        fw.write("---\n")
        fw.write("- **Sample:** " + SNAME + "  \n")
        fw.write("- **Organisms:**   \n\n    - *" + organisms[0].replace("_", " ") + "* (genome size = " + str(gs[0]) +
                 " bp )  \n\n    - *" + organisms[1].replace("_", " ") + "* (genome size = " + str(gs[1]) + " bp)  \n")
        fw.write("- **Number of base pairs (bp) in reads aligned to *" +
                 organisms[0].replace("_", " ") + "* (genome 1) at " + str(identity) + "\% identity:** " + str(nbRead[0]) + "  \n")
        fw.write("- **Number of base pairs (bp) in reads aligned to *" +
                 organisms[1].replace("_", " ") + "* (genome 2) at " + str(identity) + "\% identity:** " + str(nbRead[1]) + "  \n")
        if (not(nbRead[0] == 0 or nbRead[1] == 0)):
            fw.write(
                "- **The formula used to compute the read ratio is the following:** \n\n  $NormalizedRead_{ratio} = \\frac{\\frac{bp_{aligned genome 1} + 1}{size{genome1}}}{\\frac{bp_{aligned genome 2} + 1}{size{genome2}}}$\n\n  ")
            fw.write("Normalized Read ratio $\\frac{" + organisms[0].replace("_", "\\;") + "}{" +
                     organisms[1].replace("_", "\\;") + "} = " + str(ratio) + "$   \n\n  ")
            fw.write("![Fig 1: Normalized read ratio (*" + organisms[0].replace("_", " ") +
                     "*/*" + organisms[1].replace("_", " ") + "*), blue line is an equal proportion of both genomes](./ratio.png)")
